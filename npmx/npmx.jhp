<?php

require dirname(__DIR__).'/manager.php';
require dirname(__DIR__).'/yandex.php';

$npm = new terminal_manager('npm', $argv);
$token = file_get_contents(dirname(__DIR__).'/token.txt');
$ya_disk = new yandex_disk_api($token);
$npm->on(['install', 'i'], ($module_name, $json, $json_path) => {
	if ($ya_disk->file_exist('/sync/'.basename($json_path))){
		$ya_disk->download_file(dirname($json_path), '/sync/'.basename($json_path));
		$json = $npm->get_json();
	}
	if (empty($json)){
		$json = [];
		$json[] = $module_name;
		nl 'first module installed: ' . $module_name;
	} else {
		if (!in_array($module_name, $json)){
			$json[] = $module_name;
			nl 'module installed: ' . $module_name;
		} else {
			nl 'module exist: ' . $module_name;
			return false;
		}
	}
	file_put_contents($json_path, json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
	$ya_disk->delete_file('/sync/'.basename($json_path));
	$ya_disk->upload_file($json_path, $path = '/sync');
	return true;
});

$npm->command('install_all', ($module_name, $json, $json_path) => {
	if (!empty($json)){
		nl 'installing...';
		foreach ($json as $module){
			$command = $npm->manager_name.' install '.$module;
			nl $command;
		}
	} else {
		nl 'Модули не найдены';
	}
});

$npm->command('mlist', fn($module_name, $json, $json_path) => {
	if (!empty($json)){
		nl 'modules:';
		foreach ($json as $name) { 
			nl '- '.$name;
		}
	} else {
		nl 'Модули не найдены';
	}
});

$npm->command('count', fn($module_name, $json, $json_path) => {
	nl 'modules count: '.count($json);
});

$npm->command('sync', ($module_name, $json, $json_path) => {
	$before = count($json);
	if ($ya_disk->file_exist('/sync/'.basename($json_path))){
		$ya_disk->download_file(dirname($json_path), '/sync/'.basename($json_path));
		$json = $npm->get_json();
	}
	foreach ($json as $mname){
		nl 'module "'.$mname.'" sync...';
	}
	$after = count($json);
	if ($before < $after){
		nl 'modules installed: '.($after - $before);
	} else {
		nl 'modules uninstalled: '.($before - $after);
	}
	nl 'modules synchronized';
	file_put_contents($json_path, json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
});

$npm->command('rm', ($module_name, $json, $json_path) => {
	if (!empty($json)){
		$before = $json;
		for ($i = 0; $i < count($json); $i++) { 
			$name = $json[$i];
			if ($name == $module_name){
				unset($json[$i]);
				nl 'module remove on yandex disk: ' . $module_name;
				file_put_contents($json_path, json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
				$ya_disk->delete_file('/sync/'.basename($json_path));
				$ya_disk->upload_file($json_path, '/sync');
				file_put_contents($json_path, json_encode($before, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
				return true;
			}
		}
	}
	nl 'module "' . $module_name.'" not found...';
	return false;
});

$npm->on('remove', ($module_name, $json, $json_path) => {
	if (!empty($json)){
		for ($i = 0; $i < count($json); $i++) { 
			$name = $json[$i];
			if ($name == $module_name){
				unset($json[$i]);
				break;
			}
		}
		nl 'module remove: ' . $module_name;
		file_put_contents($json_path, json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
		$ya_disk->delete_file('/sync/'.basename($json_path));
		$ya_disk->upload_file($json_path, '/sync');
		return true;
	}
});

$npm->command('_h', ($module_name, $json, $json_path) => {
	nl 'commands:';
	foreach ($npm->command_list as $name) { 
		nl '- '.$name;
	}
});